## 解法1: Recursion
TC：O(H) SC:O(H)
```
class Solution:
    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        if not root:
            return TreeNode(val)
        if root.val > val:
            root.left = self.insertIntoBST(root.left, val)
        else:
            root.right = self.insertIntoBST(root.right, val)
        return root
```

## 解法2: Iteration
不断地向下寻找插入点。

TC：O(H) SC:O(1)
```
class Solution:
    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        if not root:
            return TreeNode(val)
        node = root
        while node:
            if val > node.val:
                if not node.right:
                    node.right = TreeNode(val)
                    return root
                node = node.right
            else:
                if not node.left:
                    node.left = TreeNode(val)
                    return root
                node = node.left
```
