## 解法1: 分治
```
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSameTree(self, root1: TreeNode, root2: TreeNode) -> bool:
        if not root1 and not root2:
            return True
        if not root1 or not root2:
            return False
        return root1.val == root2.val and self.isSameTree(root1.left, root2.left) \
                and self.isSameTree(root1.right, root2.right)
```

## 解法2: Iteration
用队列来挨个检查每一对nodes。如果相同，就把它们的左儿子都添加进来，再添加右儿子。
```
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        def check(p, q):
            if not p and not q:
                return True
            if not p or not q:
                return False
            if p.val != q.val:
                return False
            return True
        
        que = collections.deque([(p, q)])
        while que:
            x, y = que.popleft()
            if not check(x, y):
                return False
            if x:   #这一步很重要，要检查一下是不是None
                que.append((x.left, y.left))
                que.append((x.right, y.right))
        return True
```
