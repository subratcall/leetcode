## 解法1: Recursion
```
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: TreeNode, targetSum: int) -> bool:
        if not root:
            return False
        if not root.left and not root.right:    
            return True if root.val == targetSum else False

        return self.hasPathSum(root.left, targetSum - root.val) or \
                self.hasPathSum(root.right, targetSum - root.val)
```

## 解法2: Traverse
```
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        def dfs(root, target, pathSum):
            if not root:
                return
            pathSum += root.val
            if not root.left and not root.right:
                if pathSum == target: self.res = True
            dfs(root.left, target, pathSum)
            dfs(root.right, target, pathSum)
        
        self.res = False
        pathSum = 0
        dfs(root, targetSum, pathSum)
        return self.res
```
